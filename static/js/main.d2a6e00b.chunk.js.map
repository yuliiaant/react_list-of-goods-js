{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALFABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","ifShowResetButton","className","onClick","type","cn","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAqB,UACrBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA0BC,EAA1B,GAAqE,IAAlCL,EAAiC,EAAjCA,UAAiC,IAAtBE,kBAAsB,SAC5DI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,EACKI,EAAcM,UAGhBN,EAMcO,CAAiBlB,EACpC,CAAEK,YAAWE,eACTY,EAAoBd,GAAaE,EAOvC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaL,IAC5BqB,KAAK,SACLF,UAAWG,IACT,SACA,UACA,CACE,WAAYlB,IAAcJ,IAPhC,iCAcA,wBACEqB,KAAK,SACLD,QAAS,kBAAMf,EAAaJ,IAC5BkB,UAAWG,IACT,SACA,aACA,CACE,WAAYlB,IAAcH,IAPhC,4BAcA,wBACEoB,KAAK,SACLD,QAAS,kBAAMb,GAAc,SAAAgB,GAAI,OAAKA,MACtCJ,UAAWG,IACT,SACA,aACA,CACE,YAAahB,IAPnB,qBAcCY,GACC,wBACEG,KAAK,SACLD,QArDV,WACEf,EAAa,IACbE,GAAc,IAoDNY,UAAU,4BAHZ,sBAUJ,6BACGX,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCjHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d2a6e00b.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALFABET = 'alfabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, isReversed = false }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALFABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReversed });\n  const ifShowResetButton = sortField || isReversed;\n\n  function reset() {\n    setSortField('');\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALFABET)}\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            {\n              'is-light': sortField !== SORT_FIELD_ALFABET,\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={cn(\n            'button',\n            'is-success',\n            {\n              'is-light': sortField !== SORT_FIELD_LENGTH,\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(prev => !prev)}\n          className={cn(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {ifShowResetButton && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}